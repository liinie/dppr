{"version":3,"sources":["assets/spaceship.svg","assets/negative_sound.mp3","assets/positive_sound.mp3","Intro.js","serviceWorker.js","components/Sidebar.js","components/Square.js","components/Board.js","components/AddScore.js","components/RankList.js","components/LogFile.js","components/Layout.js","index.js"],"names":["module","exports","__webpack_require__","p","Intro","react_default","a","createElement","className","src","spaceShipLogo","alt","Component","Boolean","window","location","hostname","match","defaultStyles","position","top","left","right","bottom","overflow","zIndex","transition","WebkitTransition","willChange","overflowY","WebkitOverflowScrolling","opacity","visibility","backgroundColor","Sidebar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sidebarWidth","defaultSidebarWidth","touchIdentifier","touchStartX","touchCurrentX","dragSupported","overlayClicked","bind","assertThisInitialized","onTouchStart","onTouchMove","onTouchEnd","onScroll","saveSidebarRef","isIos","test","navigator","userAgent","setState","saveSidebarWidth","isTouching","ev","touch","targetTouches","identifier","clientX","ind","length","touchWidth","touchSidebarWidth","open","dragToggleDistance","onSetOpen","inCancelDistanceOnScroll","pullRight","Math","abs","width","sidebar","offsetWidth","node","innerWidth","min","dragHandle","sidebarStyle","objectSpread","styles","contentStyle","content","overlayStyle","overlay","useTouch","rootProps","rootClassName","style","root","role","id","rootId","hasBoxShadow","shadow","docked","transform","WebkitTransform","boxShadow","percentage","concat","transitions","onTouchCancel","dragHandleStyle","touchHandleWidth","sidebarClassName","ref","sidebarId","overlayClassName","onClick","overlayId","contentClassName","contentId","children","defaultProps","Square","value","React","Board","board","Array","fill","map","x","row","i","key","col","j","current_state_row","current_state_col","components_Square","end_state_row","end_state_col","textAlign","margin","cellSpacing","AddScore","scoreColor","score","color","RankList","totalStep","FakeData","data","name","scoreData","index","LogFile","getLogFile","jsObj","JSON","stringify","keyPressHist","hiddenElement","document","href","encodeURIComponent","target","download","click","ReactDOM","render","src_Intro_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe78be92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceship.57a23070.svg\";","module.exports = __webpack_public_path__ + \"static/media/negative_sound.dad0bcc7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/positive_sound.13559345.mp3\";","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport spaceShipLogo from './assets/spaceship.svg';\r\nimport './Intro.css';\r\n// import {Link} from 'react-router-dom';\r\n\r\nclass Intro extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={spaceShipLogo} className=\"App-logo\" alt=\"logo\" />\r\n          <div className='empty_space'>{' '}</div>\r\n            <p>Enter Spaceship game</p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Intro;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Intro is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CANCEL_DISTANCE_ON_SCROLL = 20;\r\n\r\nconst defaultStyles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        overflow: \"hidden\"\r\n    },\r\n    sidebar: {\r\n        zIndex: 2,\r\n        position: \"absolute\",\r\n        top: 0,\r\n        bottom: 0,\r\n        transition: \"transform .3s ease-out\",\r\n        WebkitTransition: \"-webkit-transform .3s ease-out\",\r\n        willChange: \"transform\",\r\n        overflowY: \"auto\"\r\n    },\r\n    content: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        overflowY: \"auto\",\r\n        WebkitOverflowScrolling: \"touch\",\r\n        transition: \"left .3s ease-out, right .3s ease-out\"\r\n    },\r\n    overlay: {\r\n        zIndex: 1,\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        opacity: 0,\r\n        visibility: \"hidden\",\r\n        transition: \"opacity .3s ease-out, visibility .3s ease-out\",\r\n        backgroundColor: \"rgba(0,0,0,.3)\"\r\n    },\r\n    dragHandle: {\r\n        zIndex: 1,\r\n        position: \"fixed\",\r\n        top: 0,\r\n        bottom: 0\r\n    }\r\n};\r\n\r\nclass Sidebar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // the detected width of the sidebar in pixels\r\n            sidebarWidth: props.defaultSidebarWidth,\r\n\r\n            // keep track of touching params\r\n            touchIdentifier: null,\r\n            touchStartX: null,\r\n            touchCurrentX: null,\r\n\r\n            // if touch is supported by the browser\r\n            dragSupported: false\r\n        };\r\n\r\n        this.overlayClicked = this.overlayClicked.bind(this);\r\n        this.onTouchStart = this.onTouchStart.bind(this);\r\n        this.onTouchMove = this.onTouchMove.bind(this);\r\n        this.onTouchEnd = this.onTouchEnd.bind(this);\r\n        this.onScroll = this.onScroll.bind(this);\r\n        this.saveSidebarRef = this.saveSidebarRef.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : \"\");\r\n        this.setState({\r\n            dragSupported:\r\n            typeof window === \"object\" && \"ontouchstart\" in window && !isIos\r\n        });\r\n        this.saveSidebarWidth();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // filter out the updates when we're touching\r\n        if (!this.isTouching()) {\r\n            this.saveSidebarWidth();\r\n        }\r\n    }\r\n\r\n    onTouchStart(ev) {\r\n        // filter out if a user starts swiping with a second finger\r\n        if (!this.isTouching()) {\r\n            const touch = ev.targetTouches[0];\r\n            this.setState({\r\n                touchIdentifier: touch.identifier,\r\n                touchStartX: touch.clientX,\r\n                touchCurrentX: touch.clientX\r\n            });\r\n        }\r\n    }\r\n\r\n    onTouchMove(ev) {\r\n        if (this.isTouching()) {\r\n            for (let ind = 0; ind < ev.targetTouches.length; ind++) {\r\n                // we only care about the finger that we are tracking\r\n                if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {\r\n                    this.setState({\r\n                        touchCurrentX: ev.targetTouches[ind].clientX\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onTouchEnd() {\r\n        if (this.isTouching()) {\r\n            // trigger a change to open if sidebar has been dragged beyond dragToggleDistance\r\n            const touchWidth = this.touchSidebarWidth();\r\n\r\n            if (\r\n                (this.props.open &&\r\n                    touchWidth <\r\n                    this.state.sidebarWidth - this.props.dragToggleDistance) ||\r\n                (!this.props.open && touchWidth > this.props.dragToggleDistance)\r\n            ) {\r\n                this.props.onSetOpen(!this.props.open);\r\n            }\r\n\r\n            this.setState({\r\n                touchIdentifier: null,\r\n                touchStartX: null,\r\n                touchCurrentX: null\r\n            });\r\n        }\r\n    }\r\n\r\n    // This logic helps us prevents the user from sliding the sidebar horizontally\r\n    // while scrolling the sidebar vertically. When a scroll event comes in, we're\r\n    // cancelling the ongoing gesture if it did not move horizontally much.\r\n    onScroll() {\r\n        if (this.isTouching() && this.inCancelDistanceOnScroll()) {\r\n            this.setState({\r\n                touchIdentifier: null,\r\n                touchStartX: null,\r\n                touchCurrentX: null\r\n            });\r\n        }\r\n    }\r\n\r\n    // True if the on going gesture X distance is less than the cancel distance\r\n    inCancelDistanceOnScroll() {\r\n        let cancelDistanceOnScroll;\r\n\r\n        if (this.props.pullRight) {\r\n            cancelDistanceOnScroll =\r\n                Math.abs(this.state.touchCurrentX - this.state.touchStartX) <\r\n                CANCEL_DISTANCE_ON_SCROLL;\r\n        } else {\r\n            cancelDistanceOnScroll =\r\n                Math.abs(this.state.touchStartX - this.state.touchCurrentX) <\r\n                CANCEL_DISTANCE_ON_SCROLL;\r\n        }\r\n        return cancelDistanceOnScroll;\r\n    }\r\n\r\n    isTouching() {\r\n        return this.state.touchIdentifier !== null;\r\n    }\r\n\r\n    overlayClicked() {\r\n        if (this.props.open) {\r\n            this.props.onSetOpen(false);\r\n        }\r\n    }\r\n\r\n    saveSidebarWidth() {\r\n        const width = this.sidebar.offsetWidth;\r\n\r\n        if (width !== this.state.sidebarWidth) {\r\n            this.setState({ sidebarWidth: width });\r\n        }\r\n    }\r\n\r\n    saveSidebarRef(node) {\r\n        this.sidebar = node;\r\n    }\r\n\r\n    // calculate the sidebarWidth based on current touch info\r\n    touchSidebarWidth() {\r\n        // if the sidebar is open and start point of drag is inside the sidebar\r\n        // we will only drag the distance they moved their finger\r\n        // otherwise we will move the sidebar to be below the finger.\r\n        if (this.props.pullRight) {\r\n            if (\r\n                this.props.open &&\r\n                window.innerWidth - this.state.touchStartX < this.state.sidebarWidth\r\n            ) {\r\n                if (this.state.touchCurrentX > this.state.touchStartX) {\r\n                    return (\r\n                        this.state.sidebarWidth +\r\n                        this.state.touchStartX -\r\n                        this.state.touchCurrentX\r\n                    );\r\n                }\r\n                return this.state.sidebarWidth;\r\n            }\r\n            return Math.min(\r\n                window.innerWidth - this.state.touchCurrentX,\r\n                this.state.sidebarWidth\r\n            );\r\n        }\r\n\r\n        if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {\r\n            if (this.state.touchCurrentX > this.state.touchStartX) {\r\n                return this.state.sidebarWidth;\r\n            }\r\n            return (\r\n                this.state.sidebarWidth -\r\n                this.state.touchStartX +\r\n                this.state.touchCurrentX\r\n            );\r\n        }\r\n        return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);\r\n    }\r\n\r\n    render() {\r\n        const sidebarStyle = {\r\n            ...defaultStyles.sidebar,\r\n            ...this.props.styles.sidebar\r\n        };\r\n        const contentStyle = {\r\n            ...defaultStyles.content,\r\n            ...this.props.styles.content\r\n        };\r\n        const overlayStyle = {\r\n            ...defaultStyles.overlay,\r\n            ...this.props.styles.overlay\r\n        };\r\n        const useTouch = this.state.dragSupported && this.props.touch;\r\n        const isTouching = this.isTouching();\r\n        const rootProps = {\r\n            className: this.props.rootClassName,\r\n            style: { ...defaultStyles.root, ...this.props.styles.root },\r\n            role: \"navigation\",\r\n            id: this.props.rootId\r\n        };\r\n        let dragHandle;\r\n\r\n        const hasBoxShadow =\r\n            this.props.shadow && (isTouching || this.props.open || this.props.docked);\r\n        // sidebarStyle right/left\r\n        if (this.props.pullRight) {\r\n            sidebarStyle.right = 0;\r\n            sidebarStyle.transform = \"translateX(100%)\";\r\n            sidebarStyle.WebkitTransform = \"translateX(100%)\";\r\n            if (hasBoxShadow) {\r\n                sidebarStyle.boxShadow = \"-2px 2px 4px rgba(0, 0, 0, 0.15)\";\r\n            }\r\n        } else {\r\n            sidebarStyle.left = 0;\r\n            sidebarStyle.transform = \"translateX(-100%)\";\r\n            sidebarStyle.WebkitTransform = \"translateX(-100%)\";\r\n            if (hasBoxShadow) {\r\n                sidebarStyle.boxShadow = \"2px 2px 4px rgba(0, 0, 0, 0.15)\";\r\n            }\r\n        }\r\n\r\n        if (isTouching) {\r\n            const percentage = this.touchSidebarWidth() / this.state.sidebarWidth;\r\n\r\n            // slide open to what we dragged\r\n            if (this.props.pullRight) {\r\n                sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;\r\n                sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;\r\n            } else {\r\n                sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;\r\n                sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) *\r\n                100}%)`;\r\n            }\r\n\r\n            // fade overlay to match distance of drag\r\n            overlayStyle.opacity = percentage;\r\n            overlayStyle.visibility = \"visible\";\r\n        } else if (this.props.docked) {\r\n            // show sidebar\r\n            if (this.state.sidebarWidth !== 0) {\r\n                sidebarStyle.transform = `translateX(0%)`;\r\n                sidebarStyle.WebkitTransform = `translateX(0%)`;\r\n            }\r\n\r\n            // make space on the left/right side of the content for the sidebar\r\n            if (this.props.pullRight) {\r\n                contentStyle.right = `${this.state.sidebarWidth}px`;\r\n            } else {\r\n                contentStyle.left = `${this.state.sidebarWidth}px`;\r\n            }\r\n        } else if (this.props.open) {\r\n            // slide open sidebar\r\n            sidebarStyle.transform = `translateX(0%)`;\r\n            sidebarStyle.WebkitTransform = `translateX(0%)`;\r\n\r\n            // show overlay\r\n            overlayStyle.opacity = 1;\r\n            overlayStyle.visibility = \"visible\";\r\n        }\r\n\r\n        if (isTouching || !this.props.transitions) {\r\n            sidebarStyle.transition = \"none\";\r\n            sidebarStyle.WebkitTransition = \"none\";\r\n            contentStyle.transition = \"none\";\r\n            overlayStyle.transition = \"none\";\r\n        }\r\n\r\n        if (useTouch) {\r\n            if (this.props.open) {\r\n                rootProps.onTouchStart = this.onTouchStart;\r\n                rootProps.onTouchMove = this.onTouchMove;\r\n                rootProps.onTouchEnd = this.onTouchEnd;\r\n                rootProps.onTouchCancel = this.onTouchEnd;\r\n                rootProps.onScroll = this.onScroll;\r\n            } else {\r\n                const dragHandleStyle = {\r\n                    ...defaultStyles.dragHandle,\r\n                    ...this.props.styles.dragHandle\r\n                };\r\n                dragHandleStyle.width = this.props.touchHandleWidth;\r\n\r\n                // dragHandleStyle right/left\r\n                if (this.props.pullRight) {\r\n                    dragHandleStyle.right = 0;\r\n                } else {\r\n                    dragHandleStyle.left = 0;\r\n                }\r\n\r\n                dragHandle = (\r\n                    <div\r\n                        style={dragHandleStyle}\r\n                        onTouchStart={this.onTouchStart}\r\n                        onTouchMove={this.onTouchMove}\r\n                        onTouchEnd={this.onTouchEnd}\r\n                        onTouchCancel={this.onTouchEnd}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div {...rootProps}>\r\n                <div\r\n                    className={this.props.sidebarClassName}\r\n                    style={sidebarStyle}\r\n                    ref={this.saveSidebarRef}\r\n                    id={this.props.sidebarId}\r\n                >\r\n                    {this.props.sidebar}\r\n                </div>\r\n                {/* eslint-disable */}\r\n                <div\r\n                    className={this.props.overlayClassName}\r\n                    style={overlayStyle}\r\n                    onClick={this.overlayClicked}\r\n                    id={this.props.overlayId}\r\n                />\r\n                {/* eslint-enable */}\r\n                <div\r\n                    className={this.props.contentClassName}\r\n                    style={contentStyle}\r\n                    id={this.props.contentId}\r\n                >\r\n                    {dragHandle}\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSidebar.propTypes = {\r\n    // main content to render\r\n    children: PropTypes.node.isRequired,\r\n\r\n    // styles\r\n    styles: PropTypes.shape({\r\n        root: PropTypes.object,\r\n        sidebar: PropTypes.object,\r\n        content: PropTypes.object,\r\n        overlay: PropTypes.object,\r\n        dragHandle: PropTypes.object\r\n    }),\r\n\r\n    // root component optional class\r\n    rootClassName: PropTypes.string,\r\n\r\n    // sidebar optional class\r\n    sidebarClassName: PropTypes.string,\r\n\r\n    // content optional class\r\n    contentClassName: PropTypes.string,\r\n\r\n    // overlay optional class\r\n    overlayClassName: PropTypes.string,\r\n\r\n    // sidebar content to render\r\n    sidebar: PropTypes.node.isRequired,\r\n\r\n    // boolean if sidebar should be docked\r\n    docked: PropTypes.bool,\r\n\r\n    // boolean if sidebar should slide open\r\n    open: PropTypes.bool,\r\n\r\n    // boolean if transitions should be disabled\r\n    transitions: PropTypes.bool,\r\n\r\n    // boolean if touch gestures are enabled\r\n    touch: PropTypes.bool,\r\n\r\n    // max distance from the edge we can start touching\r\n    touchHandleWidth: PropTypes.number,\r\n\r\n    // Place the sidebar on the right\r\n    pullRight: PropTypes.bool,\r\n\r\n    // Enable/Disable sidebar shadow\r\n    shadow: PropTypes.bool,\r\n\r\n    // distance we have to drag the sidebar to toggle open state\r\n    dragToggleDistance: PropTypes.number,\r\n\r\n    // callback called when the overlay is clicked\r\n    onSetOpen: PropTypes.func,\r\n\r\n    // Initial sidebar width when page loads\r\n    defaultSidebarWidth: PropTypes.number,\r\n\r\n    // root component optional id\r\n    rootId: PropTypes.string,\r\n\r\n    // sidebar optional id\r\n    sidebarId: PropTypes.string,\r\n\r\n    // content optional id\r\n    contentId: PropTypes.string,\r\n\r\n    // overlay optional id\r\n    overlayId: PropTypes.string\r\n};\r\n\r\nSidebar.defaultProps = {\r\n    docked: false,\r\n    open: false,\r\n    transitions: true,\r\n    touch: true,\r\n    touchHandleWidth: 20,\r\n    pullRight: false,\r\n    shadow: true,\r\n    dragToggleDistance: 30,\r\n    onSetOpen: () => {},\r\n    styles: {},\r\n    defaultSidebarWidth: 0\r\n};\r\n\r\nexport default Sidebar;","import React from \"react\";\r\n\r\nclass Square extends React.Component{\r\n    render(){\r\n        return <div className=\"square\">{this.props.value}</div>;\r\n    }\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from '../components/Square';\r\n\r\nclass Board extends React.Component{\r\n\r\n    render(){\r\n        const g = Array(6).fill().map(x => Array(6).fill());\r\n        const board = g.map((row, i) => { return (\r\n            <tr key={\"row_\"+i}>\r\n                {row.map((col, j) => {\r\n                    // console.log([i, j]);\r\n                    if (i === this.props.current_state_row && j === this.props.current_state_col) {\r\n                        return <Square value={'X'}/>;\r\n                    } else if (i === this.props.end_state_row && j === this.props.end_state_col){\r\n                        return <Square value={'O'}/>\r\n                    } else {\r\n                        return <Square value = {''}/>\r\n                    }\r\n                })}\r\n            </tr>)\r\n        });\r\n\r\n        return (\r\n            <div style={{ textAlign:'center'}}>\r\n                <div style={{margin: 'auto', width:\"40%\"}}>\r\n                    <table cellSpacing=\"0\">\r\n                        <tbody>\r\n                        {board}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nclass AddScore extends React.Component {\r\n    render(){\r\n        const scoreColor = this.props.score <= 0 ? \"red\": \"green\";\r\n\r\n        return (\r\n            <p>Your score is:\r\n                <span style={{color: scoreColor}}> {this.props.score}</span></p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddScore;","import React, { Component } from 'react';\r\nimport FakeData from '../fake_data'\r\n// import BestScores from './best_score_list'\r\n\r\nclass RankList extends Component {\r\n\r\n    render(){\r\n        return(\r\n            this.props.totalStep > 0 && this.props.totalStep % 10 === 0 &&\r\n            <div>\r\n                <h2 className=\"steps\"> Ranking board\r\n                    after total step of {this.props.totalStep}</h2>\r\n\r\n                {FakeData.map((data) =>{\r\n                    return (\r\n                        <div>\r\n                            <li>{data.id}: {data.name} {data.score.map((scoreData, index) =>{\r\n                                if(index === ((this.props.totalStep/10) - 1))\r\n                                return <div>{scoreData}</div>\r\n                                }\r\n                            )}</li>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RankList;","import React from \"react\";\r\n\r\nclass LogFile extends React.Component {\r\n\r\n    getLogFile = () =>{\r\n        const jsObj = JSON.stringify(this.props.keyPressHist);\r\n\r\n        var hiddenElement = document.createElement(\"a\");\r\n        hiddenElement.href =\r\n            \"data:text/json;charset=utf-8,\" + encodeURIComponent(jsObj);\r\n        hiddenElement.target = \"_blank\";\r\n        hiddenElement.download = \"logfile.json\";\r\n        hiddenElement.click();\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.getLogFile()}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default LogFile;","import React from \"react\";\r\nimport Board from '../components/Board';\r\nimport AddScore from '../components/AddScore';\r\nimport RankList from '../components/RankList';\r\nimport negative_sound from '../assets/negative_sound.mp3';\r\nimport positive_sound from '../assets/positive_sound.mp3';\r\nimport LogFile from '../components/LogFile';\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentKey: '',\r\n            current_state_row: null,\r\n            current_state_col:null,\r\n            end_state_row:null,\r\n            end_state_col:null,\r\n            teleportationKey: '',\r\n            episode_win: null,\r\n            step: null,\r\n            round: null,\r\n            score: null,\r\n            goal: null,\r\n            episode_interrupt: null,\r\n            gamma: null,\r\n            totalStep: null,\r\n            crash: false,\r\n            sidebarOpen: true,\r\n            keyPressHist: [],\r\n            // scoreIncrease:false,\r\n        };\r\n        this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\r\n    }\r\n\r\n    onSetSidebarOpen(open) {\r\n        this.setState({ sidebarOpen: open });\r\n    }\r\n\r\n    checkEpisodeWin = () => {\r\n        if (this.state.current_state_row === this.state.end_state_row &&\r\n            this.state.current_state_col === this.state.end_state_col) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    next_round_board = () =>{\r\n        this.setState({\r\n            current_state_row: 5,\r\n            current_state_col: 0,\r\n            episode_win: false,\r\n            step: 0,\r\n            round: this.state.round +1,\r\n        });\r\n    };\r\n\r\n\r\n    checkCrash = () => {\r\n        const crashRate = (Math.round((1 - this.state.gamma)*100)/100);\r\n        if (Math.random() < crashRate) {\r\n            this.setState({\r\n                crash: true,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    handleKeyPress = (e) =>{\r\n        if ((e.key === \"ArrowRight\" ||\r\n            e.key === \"ArrowUp\" ||\r\n            e.key ===this.state.teleportationKey) ||\r\n            (((97 <= e.key.charCodeAt(0) &&\r\n                e.key.charCodeAt(0) <= 122) ||\r\n                e.key === \"ArrowLeft\" ||\r\n                e.key === \"ArrowDown\")&&\r\n                !this.state.keyPressHist.includes(e.key))){\r\n\r\n            console.log(e.key.charCodeAt(0));\r\n            this.setState({\r\n                currentKey: e.key,\r\n                step: this.state.step + 1,\r\n                score: this.state.score - 1,\r\n                totalStep: this.state.totalStep +1,\r\n            });\r\n\r\n            this.setState(previousState => ({\r\n                keyPressHist: [...previousState.keyPressHist, e.key]\r\n            }));\r\n\r\n            if (this.state.totalStep >= 1){\r\n                this.checkCrash();\r\n            }\r\n\r\n            if (e.key === \"ArrowRight\") {\r\n                if (this.state.current_state_col + 1 <= 5){\r\n                    this.setState({\r\n                        current_state_col: this.state.current_state_col + 1,\r\n                    });\r\n                }\r\n                this.checkGameStatus();\r\n            }else if (e.key === \"ArrowUp\") {\r\n                if (this.state.current_state_row - 1 >= 0){\r\n                    this.setState({\r\n                        current_state_row: this.state.current_state_row - 1\r\n                    });\r\n                }\r\n                this.checkGameStatus();\r\n            }else if (e.key === this.state.teleportationKey){\r\n                this.setState({\r\n                    current_state_row: this.state.end_state_row,\r\n                    current_state_col: this.state.end_state_col,\r\n                    episode_win: true,\r\n                    score: this.state.score + this.state.goal,\r\n                });\r\n                // TODO: freeze the function of steps count so that the\r\n                this.checkGameStatus();\r\n            }else{\r\n                document.getElementById('negative_sound').play();\r\n            }\r\n        }else{\r\n\r\n        }\r\n\r\n    };\r\n\r\n    checkGameStatus() {\r\n        if (this.checkEpisodeWin()) {\r\n            this.setState({\r\n                episode_win: true,\r\n                score: this.state.score + this.state.goal,\r\n            });\r\n            // setTimeout(()=>this.next_round_board(), 1000);\r\n            document.getElementById('positive_sound').play();\r\n            this.next_round_board()\r\n        } else {\r\n            document.getElementById('negative_sound').play();\r\n        }\r\n    }\r\n\r\n    gameStatus = () =>{\r\n        return <p>step {this.state.step} / round {this.state.round}</p>\r\n    };\r\n\r\n    showCrashMessage= () =>{\r\n        this.componentWillUnmount();\r\n        return <p>Your spaceship crashes, game over, thanks for playing!</p>\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n\r\n        this.setState({\r\n            current_state_row: 5,\r\n            current_state_col: 0,\r\n            end_state_row: 0,\r\n            end_state_col: 5,\r\n            teleportationKey: \"p\",\r\n            episode_win:false,\r\n            step:0,\r\n            round:1,\r\n            goal: 20,\r\n            score: 0,\r\n            gamma: 0.94,\r\n            totalStep: 0,\r\n            crash: false,\r\n        });\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n\r\n    render() {\r\n        const title = \"Spaceship Adventure\";\r\n        const instruction1 = \"skill1: try arrow keys to move. Hint: ArrowUp moves your spaceship up.\";\r\n        const instruction2 = \"skill2: try [a-z] lower case letters to teleport the spaceship, so that your spaceship will reach the \" +\r\n            \"dstination in one move\";\r\n\r\n        const status = this.gameStatus();\r\n\r\n        return(\r\n            <div>\r\n                {/*<Intro/>*/}\r\n                {/*<Sidebar*/}\r\n                {/*sidebar={<b>Sidebar content</b>}*/}\r\n                {/*open={this.state.sidebarOpen}*/}\r\n                {/*onSetOpen={this.onSetSidebarOpen}*/}\r\n                {/*styles={{ sidebar: { background: \"white\" } }}>*/}\r\n                {/*<button onClick={() => this.onSetSidebarOpen(true)}>*/}\r\n                {/*Open sidebar*/}\r\n                {/*</button>*/}\r\n                {/*</Sidebar>*/}\r\n                <h1 style={{ textAlign:'center'}}>{title}</h1>\r\n                <h3 className=\"instruction1\">{instruction1}</h3>\r\n                <h3 className=\"instruction2\">{instruction2}</h3>\r\n                <div className=\"game_status\">{status}</div>\r\n                <p>Your total step: {this.state.totalStep}</p>\r\n                <p>There is a {Math.round((1-this.state.gamma)*100)} percent probability that\r\n                    your spaceship will crash in the next step!\r\n                </p>\r\n                <div>{this.state.crash && this.showCrashMessage()}</div>\r\n                <AddScore\r\n                    score={this.state.score}\r\n                />\r\n                <Board\r\n                    current_state_row={this.state.current_state_row}\r\n                    current_state_col={this.state.current_state_col}\r\n                    end_state_row={this.state.end_state_row}\r\n                    end_state_col={this.state.end_state_col}\r\n                />\r\n                <p>The last key(s) you pressed: {this.state.keyPressHist}</p>\r\n                <audio id=\"negative_sound\" src={negative_sound}/>\r\n                <audio id=\"positive_sound\" src={positive_sound}/>\r\n                <RankList totalStep={this.state.totalStep}/>\r\n                {this.state.crash && <LogFile keyPressHist={this.state.keyPressHist}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Intro from './Intro';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport Sidebar from \"./components/Sidebar\";\r\n\r\nimport Layout from './components/Layout'\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<Intro />, document.getElementById('root'));\r\n// ReactDOM.render(<Layout />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}