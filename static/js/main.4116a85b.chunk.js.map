{"version":3,"sources":["assets/spaceship.svg","assets/negative_sound.mp3","assets/positive_sound.mp3","Intro.js","serviceWorker.js","components/Square.js","components/Board.js","components/AddScore.js","components/RankList.js","components/LogFile.js","components/Layout.js","index.js"],"names":["module","exports","__webpack_require__","p","Intro","react_default","a","createElement","className","src","spaceShipLogo","alt","Link","to","Component","Boolean","window","location","hostname","match","Square","this","props","value","React","Board","_this","board","Array","fill","map","x","row","i","key","col","j","current_state_row","current_state_col","components_Square","end_state_row","end_state_col","style","textAlign","margin","width","cellSpacing","AddScore","scoreColor","score","color","RankList","totalStep","FakeData","data","id","name","scoreData","index","LogFile","getLogFile","jsObj","JSON","stringify","keyPressHist","hiddenElement","document","href","encodeURIComponent","target","download","click","Layout","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkEpisodeWin","state","next_round_board","setState","episode_win","step","round","checkCrash","crashRate","Math","gamma","random","crash","handleKeyPress","e","teleportationKey","charCodeAt","includes","console","log","currentKey","previousState","toConsumableArray","concat","checkGameStatus","goal","getElementById","play","gameStatus","showCrashMessage","componentWillUnmount","episode_interrupt","sidebarOpen","onSetSidebarOpen","bind","assertThisInitialized","open","addEventListener","removeEventListener","status","components_AddScore","components_Board","negative_sound","positive_sound","components_RankList","components_LogFile","Routes","HashRouter","Switch","Route","exact","path","component","parh","ReactDOM","render","src_Routes","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4116a85b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceship.57a23070.svg\";","module.exports = __webpack_public_path__ + \"static/media/negative_sound.dad0bcc7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/positive_sound.13559345.mp3\";","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport spaceShipLogo from './assets/spaceship.svg';\r\nimport './Intro.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Intro extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={spaceShipLogo} className=\"App-logo\" alt=\"logo\" />\r\n          <div className='empty_space'>{' '}</div>\r\n            <Link to='/main' className='link'>Enter Spaceship game</Link>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Intro;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Intro is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nclass Square extends React.Component{\r\n    render(){\r\n        return <div className=\"square\">{this.props.value}</div>;\r\n    }\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from '../components/Square';\r\n\r\nclass Board extends React.Component{\r\n\r\n    render(){\r\n        const g = Array(6).fill().map(x => Array(6).fill());\r\n        const board = g.map((row, i) => { return (\r\n            <tr key={\"row_\"+i}>\r\n                {row.map((col, j) => {\r\n                    // console.log([i, j]);\r\n                    if (i === this.props.current_state_row && j === this.props.current_state_col) {\r\n                        return <Square value={'X'}/>;\r\n                    } else if (i === this.props.end_state_row && j === this.props.end_state_col){\r\n                        return <Square value={'O'}/>\r\n                    } else {\r\n                        return <Square value = {''}/>\r\n                    }\r\n                })}\r\n            </tr>)\r\n        });\r\n\r\n        return (\r\n            <div style={{ textAlign:'center'}}>\r\n                <div style={{margin: 'auto', width:\"40%\"}}>\r\n                    <table cellSpacing=\"0\">\r\n                        <tbody>\r\n                        {board}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nclass AddScore extends React.Component {\r\n    render(){\r\n        const scoreColor = this.props.score <= 0 ? \"red\": \"green\";\r\n\r\n        return (\r\n            <p>Your score is:\r\n                <span style={{color: scoreColor}}> {this.props.score}</span></p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddScore;","import React, { Component } from 'react';\r\nimport FakeData from '../fake_data'\r\n// import BestScores from './best_score_list'\r\n\r\nclass RankList extends Component {\r\n\r\n    render(){\r\n        return(\r\n            this.props.totalStep > 0 && this.props.totalStep % 10 === 0 &&\r\n            <div>\r\n                <h2 className=\"steps\"> Ranking board\r\n                    after total step of {this.props.totalStep}</h2>\r\n\r\n                {FakeData.map((data) =>{\r\n                    return (\r\n                        <div>\r\n                            <li>{data.id}: {data.name} {data.score.map((scoreData, index) =>{\r\n                                if(index === ((this.props.totalStep/10) - 1))\r\n                                    return <div>{scoreData}</div>\r\n                                }\r\n                            )}</li>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RankList;","import React from \"react\";\r\n\r\nclass LogFile extends React.Component {\r\n\r\n    getLogFile = () =>{\r\n        const jsObj = JSON.stringify(this.props.keyPressHist);\r\n\r\n        var hiddenElement = document.createElement(\"a\");\r\n        hiddenElement.href =\r\n            \"data:text/json;charset=utf-8,\" + encodeURIComponent(jsObj);\r\n        hiddenElement.target = \"_blank\";\r\n        hiddenElement.download = \"logfile.json\";\r\n        hiddenElement.click();\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.getLogFile()}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default LogFile;","import React from \"react\";\r\nimport Board from '../components/Board';\r\nimport AddScore from '../components/AddScore';\r\nimport RankList from '../components/RankList';\r\nimport negative_sound from '../assets/negative_sound.mp3';\r\nimport positive_sound from '../assets/positive_sound.mp3';\r\nimport LogFile from '../components/LogFile';\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentKey: '',\r\n            current_state_row: null,\r\n            current_state_col:null,\r\n            end_state_row:null,\r\n            end_state_col:null,\r\n            teleportationKey: '',\r\n            episode_win: null,\r\n            step: null,\r\n            round: null,\r\n            score: null,\r\n            goal: null,\r\n            episode_interrupt: null,\r\n            gamma: null,\r\n            totalStep: null,\r\n            crash: false,\r\n            sidebarOpen: true,\r\n            keyPressHist: [],\r\n            // scoreIncrease:false,\r\n        };\r\n        this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\r\n    }\r\n\r\n    onSetSidebarOpen(open) {\r\n        this.setState({ sidebarOpen: open });\r\n    }\r\n\r\n    checkEpisodeWin = () => {\r\n        if (this.state.current_state_row === this.state.end_state_row &&\r\n            this.state.current_state_col === this.state.end_state_col) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    };\r\n\r\n    next_round_board = () =>{\r\n        this.setState({\r\n            current_state_row: 5,\r\n            current_state_col: 0,\r\n            episode_win: false,\r\n            step: 0,\r\n            round: this.state.round +1,\r\n        });\r\n    };\r\n\r\n\r\n    checkCrash = () => {\r\n        const crashRate = (Math.round((1 - this.state.gamma)*100)/100);\r\n        if (Math.random() < crashRate) {\r\n            this.setState({\r\n                crash: true,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    handleKeyPress = (e) =>{\r\n        if ((e.key === \"ArrowRight\" ||\r\n            e.key === \"ArrowUp\" ||\r\n            e.key ===this.state.teleportationKey) ||\r\n            (((97 <= e.key.charCodeAt(0) &&\r\n                e.key.charCodeAt(0) <= 122) ||\r\n                e.key === \"ArrowLeft\" ||\r\n                e.key === \"ArrowDown\")&&\r\n                !this.state.keyPressHist.includes(e.key))){\r\n\r\n            console.log(e.key.charCodeAt(0));\r\n            this.setState({\r\n                currentKey: e.key,\r\n                step: this.state.step + 1,\r\n                score: this.state.score - 1,\r\n                totalStep: this.state.totalStep +1,\r\n            });\r\n\r\n            this.setState(previousState => ({\r\n                keyPressHist: [...previousState.keyPressHist, e.key]\r\n            }));\r\n\r\n            if (this.state.totalStep >= 1){\r\n                this.checkCrash();\r\n            }\r\n\r\n            if (e.key === \"ArrowRight\") {\r\n                if (this.state.current_state_col + 1 <= 5){\r\n                    this.setState({\r\n                        current_state_col: this.state.current_state_col + 1,\r\n                    });\r\n                }\r\n                this.checkGameStatus();\r\n            }else if (e.key === \"ArrowUp\") {\r\n                if (this.state.current_state_row - 1 >= 0){\r\n                    this.setState({\r\n                        current_state_row: this.state.current_state_row - 1\r\n                    });\r\n                }\r\n                this.checkGameStatus();\r\n            }else if (e.key === this.state.teleportationKey){\r\n                this.setState({\r\n                    current_state_row: this.state.end_state_row,\r\n                    current_state_col: this.state.end_state_col,\r\n                    episode_win: true,\r\n                    score: this.state.score + this.state.goal,\r\n                });\r\n                // TODO: freeze the function of steps count so that the\r\n                this.checkGameStatus();\r\n            }else{\r\n                document.getElementById('negative_sound').play();\r\n            }\r\n        }else{\r\n\r\n        }\r\n\r\n    };\r\n\r\n    checkGameStatus() {\r\n        if (this.checkEpisodeWin()) {\r\n            this.setState({\r\n                episode_win: true,\r\n                score: this.state.score + this.state.goal,\r\n            });\r\n            // setTimeout(()=>this.next_round_board(), 1000);\r\n            document.getElementById('positive_sound').play();\r\n            this.next_round_board()\r\n        } else {\r\n            document.getElementById('negative_sound').play();\r\n        }\r\n    }\r\n\r\n    gameStatus = () =>{\r\n        return <p>step {this.state.step} / round {this.state.round}</p>\r\n    };\r\n\r\n    showCrashMessage= () =>{\r\n        this.componentWillUnmount();\r\n        return <p>Your spaceship crashes, game over, thanks for playing!</p>\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n\r\n        this.setState({\r\n            current_state_row: 5,\r\n            current_state_col: 0,\r\n            end_state_row: 0,\r\n            end_state_col: 5,\r\n            teleportationKey: \"p\",\r\n            episode_win:false,\r\n            step:0,\r\n            round:1,\r\n            goal: 20,\r\n            score: 0,\r\n            gamma: 0.94,\r\n            totalStep: 0,\r\n            crash: false,\r\n        });\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n\r\n    render() {\r\n        const title = \"Spaceship Adventure\";\r\n        const instruction1 = \"skill1: try arrow keys to move. Hint: ArrowUp moves your spaceship up.\";\r\n        const instruction2 = \"skill2: try [a-z] lower case letters to teleport the spaceship, so that your spaceship will reach the \" +\r\n            \"dstination in one move\";\r\n\r\n        const status = this.gameStatus();\r\n\r\n        return(\r\n            <div>\r\n                {/*<Intro/>*/}\r\n                {/*<Sidebar*/}\r\n                {/*sidebar={<b>Sidebar content</b>}*/}\r\n                {/*open={this.state.sidebarOpen}*/}\r\n                {/*onSetOpen={this.onSetSidebarOpen}*/}\r\n                {/*styles={{ sidebar: { background: \"white\" } }}>*/}\r\n                {/*<button onClick={() => this.onSetSidebarOpen(true)}>*/}\r\n                {/*Open sidebar*/}\r\n                {/*</button>*/}\r\n                {/*</Sidebar>*/}\r\n                <h1 style={{ textAlign:'center'}}>{title}</h1>\r\n                <h3 className=\"instruction1\">{instruction1}</h3>\r\n                <h3 className=\"instruction2\">{instruction2}</h3>\r\n                <div className=\"game_status\">{status}</div>\r\n                <p>Your total step: {this.state.totalStep}</p>\r\n                <p>There is a {Math.round((1-this.state.gamma)*100)} percent probability that\r\n                    your spaceship will crash in the next step!\r\n                </p>\r\n                <div>{this.state.crash && this.showCrashMessage()}</div>\r\n                <AddScore\r\n                    score={this.state.score}\r\n                />\r\n                <Board\r\n                    current_state_row={this.state.current_state_row}\r\n                    current_state_col={this.state.current_state_col}\r\n                    end_state_row={this.state.end_state_row}\r\n                    end_state_col={this.state.end_state_col}\r\n                />\r\n                <p>The key(s) you pressed: {this.state.keyPressHist.map((data) => {\r\n                        return <li>{data}</li>\r\n                    })\r\n                }</p>\r\n                <audio id=\"negative_sound\" src={negative_sound}/>\r\n                <audio id=\"positive_sound\" src={positive_sound}/>\r\n                <RankList totalStep={this.state.totalStep}/>\r\n                {this.state.crash && <LogFile keyPressHist={this.state.keyPressHist}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Intro from './Intro';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// import Sidebar from \"./components/Sidebar\";\r\n\r\nimport Layout from './components/Layout'\r\n\r\nclass Routes extends React.Component {\r\n    render(){\r\n        return(\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route exact path='/' component={Intro}/>\r\n                    <Route exact parh='/main' component={Layout}/>\r\n                </Switch>\r\n            </HashRouter>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nReactDOM.render(<Routes />, document.getElementById('root'));\r\n// ReactDOM.render(<Layout />, document.getElementById('root'));\r\n// ReactDOM.render(<Intro />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}